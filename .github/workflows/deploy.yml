name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        
        # Write the private key
        echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/do_key
        
        # Set proper permissions
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/do_key
        
        # Add SSH config
        cat >> ~/.ssh/config <<EOF
        Host do-server
          HostName ${{ secrets.DO_HOST }}
          User ${{ secrets.DO_USER }}
          IdentityFile ~/.ssh/do_key
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
        EOF
        
        chmod 600 ~/.ssh/config

    - name: Test SSH Connection
      run: |
        ssh do-server 'echo "SSH connection established successfully"'

    - name: Deploy to server
      run: |
        echo "üöÄ Starting deployment..."
        
        # Create tarball excluding unnecessary files
        tar -czf deploy.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='sandbox' \
          --exclude='logs' \
          --exclude='*.log' \
          --exclude='.env' \
          --exclude='.DS_Store' \
          --exclude='deploy.tar.gz' \
          .
        
        # Copy tarball to server
        scp deploy.tar.gz do-server:/tmp/
        
        # Deploy on server
        ssh do-server 'bash -s' << 'ENDSSH'
          set -e
          
          echo "üì¶ Extracting files..."
          
          # Variables
          APP_DIR="/home/claude-app/app"
          TEMP_DIR="/tmp/claude-deploy-$(date +%s)"
          
          # Create temp directory and extract
          mkdir -p $TEMP_DIR
          cd $TEMP_DIR
          tar -xzf /tmp/deploy.tar.gz
          
          # Stop service
          echo "üõë Stopping service..."
          sudo systemctl stop claude-app || true
          
          # Backup current deployment
          if [ -d "$APP_DIR" ]; then
            echo "üì¶ Backing up current deployment..."
            sudo cp -r $APP_DIR ${APP_DIR}.backup
          fi
          
          # Copy new files
          echo "üìÇ Deploying new files..."
          sudo rm -rf $APP_DIR/*
          sudo cp -r * $APP_DIR/
          sudo cp -r .[^.]* $APP_DIR/ 2>/dev/null || true
          
          # Set ownership
          sudo chown -R claude-app:claude-app $APP_DIR
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          cd $APP_DIR
          sudo -u claude-app /home/claude-app/.bun/bin/bun install
          
          # Copy environment if exists in backup
          if [ -f "${APP_DIR}.backup/.env" ]; then
            echo "üîê Restoring environment variables..."
            sudo cp ${APP_DIR}.backup/.env $APP_DIR/.env
            sudo chown claude-app:claude-app $APP_DIR/.env
            sudo chmod 600 $APP_DIR/.env
          fi
          
          # Start service
          echo "‚úÖ Starting service..."
          sudo systemctl start claude-app
          
          # Verify deployment
          sleep 5
          if sudo systemctl is-active --quiet claude-app; then
            echo "‚úÖ Deployment successful!"
            # Clean up backup
            sudo rm -rf ${APP_DIR}.backup
          else
            echo "‚ùå Deployment failed! Rolling back..."
            sudo rm -rf $APP_DIR
            sudo mv ${APP_DIR}.backup $APP_DIR
            sudo systemctl start claude-app
            exit 1
          fi
          
          # Clean up
          rm -rf $TEMP_DIR /tmp/deploy.tar.gz
          
          echo "üéâ Deployment complete!"
        ENDSSH

    - name: Verify deployment
      run: |
        # Wait a moment for service to stabilize
        sleep 10
        
        # Check if service is running
        ssh do-server 'sudo systemctl is-active claude-app'
        
        # Check if website is responding
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://openode.ai)
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Website is responding correctly (HTTP $HTTP_STATUS)"
        else
          echo "‚ùå Website returned status code: $HTTP_STATUS"
          exit 1
        fi
        
        # Clean up local tarball
        rm -f deploy.tar.gz

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment to openode.ai successful!"
          echo "View the site at: https://openode.ai"
        else
          echo "‚ùå Deployment to openode.ai failed!"
          echo "Check the logs above for details."
        fi